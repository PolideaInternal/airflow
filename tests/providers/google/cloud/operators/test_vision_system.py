# -*- coding: utf-8 -*-
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

import os
from tempfile import NamedTemporaryFile

import pytest

from tests.gcp.utils.gcp_authenticator import GCP_AI_KEY
from tests.test_utils.gcp_system_helpers import CLOUD_DAG_FOLDER, GcpSystemTest, provide_gcp_context

GCP_BUCKET_NAME = os.environ.get("GCP_VISION_BUCKET_NAME", "vision-bucket-system-test")
GCP_REFERENCE_IMAGE_URL = os.environ.get(
    "GCP_VISION_REFERENCE_IMAGE_URL", "gs://bucket-name/image.png"
)
GCP_ANNOTATE_IMAGE_URL = os.environ.get(
    "GCP_VISION_ANNOTATE_IMAGE_URL", "gs://bucket-name/image.png"
)
GCP_VIDEO_SOURCE_URL = os.environ.get(
    "GCP_VISION_SOURCE_IMAGE_URL", "http://google.com/image.jpg"
)

command = GcpSystemTest.commands_registry()


@command
def delete_bucket():
    GcpSystemTest.delete_gcs_bucket(GCP_BUCKET_NAME)


@command
def create_bucket():
    GcpSystemTest.create_gcs_bucket(GCP_BUCKET_NAME, location="europe-north1")


@command
def upload_file():
    with NamedTemporaryFile(suffix=".png") as file:
        GcpSystemTest.executor.execute_cmd(
            ["curl", "-s", GCP_VIDEO_SOURCE_URL, "-o", file.name]
        )
        GcpSystemTest.upload_to_gcs(GCP_ANNOTATE_IMAGE_URL, file.name)
        GcpSystemTest.upload_to_gcs(GCP_REFERENCE_IMAGE_URL, file.name)


@pytest.fixture(scope="module")
def helper():
    create_bucket()
    upload_file()
    yield
    delete_bucket()


@GcpSystemTest.skip(GCP_AI_KEY)
@pytest.mark.usefixtures("helper")
def test_run_example_gcp_vision_autogenerated_id_dag():
    with provide_gcp_context(GCP_AI_KEY):
        GcpSystemTest.run_dag("example_gcp_vision_autogenerated_id", CLOUD_DAG_FOLDER)


@GcpSystemTest.skip(GCP_AI_KEY)
@pytest.mark.usefixtures("helper")
def test_run_example_gcp_vision_explicit_id_dag():
    with provide_gcp_context(GCP_AI_KEY):
        GcpSystemTest.run_dag("example_gcp_vision_explicit_id", CLOUD_DAG_FOLDER)


@GcpSystemTest.skip(GCP_AI_KEY)
@pytest.mark.usefixtures("helper")
def test_run_example_gcp_vision_annotate_image_dag():
    with provide_gcp_context(GCP_AI_KEY):
        GcpSystemTest.run_dag("example_gcp_vision_annotate_image", CLOUD_DAG_FOLDER)


if __name__ == "__main__":
    GcpSystemTest.cli()
